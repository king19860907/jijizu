package com.jijizu.core.diary.dao;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.jijizu.core.diary.dto.DiaryInfo;
import com.jijizu.core.diary.dto.SickInfo;
import com.jijizu.core.user.dto.UserInfo;

public interface DiaryDAO {

	/**   
	 *******************************************************************************
	 * @function : 保存小本本
	 * @param para
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-3-29   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	Long saveDiary(Map<String,Object> para);
	
	/**   
	 *******************************************************************************
	 * @function : 更新小本本
	 * @param para
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-7   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	void updateDiary(Map<String,Object> para);
	
	/**   
	 *******************************************************************************
	 * @function : 查询孩子的小本本
	 * @param childId
	 * @param diaryType
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-3-29   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	List<DiaryInfo> findChildDiary(Long childId,String diaryType);
	
	/**   
	 *******************************************************************************
	 * @function : 查询平均小本本数据
	 * @param diaryType
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-1   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	List<Map<String,String>> findAvgDiaryData(String diaryType,List<Long> childMonths,Long rownum);
	
	/**   
	 *******************************************************************************
	 * @function : 查询孩子小本本数据
	 * @param childId
	 * @param diaryType
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-1   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	List<DiaryInfo> findChildDiaryData(Long childId,String diaryType,Long rownum);
	
	/**   
	 *******************************************************************************
	 * @function : 根据id查询孩子的小本本
	 * @param diaryId
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-2   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	DiaryInfo getDiaryById(Long diaryId);
	
	/**   
	 *******************************************************************************
	 * @function : 删除小本本信息
	 * @param diaryId
	 * @param userId
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-2   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	void deleteDiaryInfo(Long diaryId,Long userId);
	
	/**   
	 *******************************************************************************
	 * @function : 根据id查询孩子的小本本 -验证框架使用
	 * @param diaryId
	 * @param para
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-2   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	DiaryInfo getDiaryById(Long diaryId,Map<String,Object> para);
	
	/**   
	 *******************************************************************************
	 * @function : 根据月份查询小本本数据
	 * @param userId
	 * @param startDate
	 * @param endDate
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-2   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	List<DiaryInfo> findDiaryByMonth(Long userId,Date startDate,Date endDate);
	
	/**   
	 *******************************************************************************
	 * @function : 查询奶粉品牌
	 * @param milkName
	 * @param rownum
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-5   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	List<String> findMilkNames(String milkName,Long rownum);
	
	/**   
	 *******************************************************************************
	 * @function : 获取第一次的平均值
	 * @param firstTimeType
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-7   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	Long getFirstDayAvg(String firstTimeType);
	
	/**   
	 *******************************************************************************
	 * @function : 根据类型获取疾病列表
	 * @param sickType
	 * @param rownum
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-9   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	List<SickInfo> findSickInfoByType(String sickName,String sickType,Long rownum);
	
	/**   
	 *******************************************************************************
	 * @function : 保存疾病信息
	 * @param sickName
	 * @param sickType
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-10   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	Long saveSick(String sickName,String sickType);
	
	/**   
	 *******************************************************************************
	 * @function : 保存小本本与症状关系
	 * @param diaryId
	 * @param sickId
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-10   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	Long saveDiarySymptom(Long diaryId,String sickType,String[] symptomNames);
	
	/**   
	 *******************************************************************************
	 * @function : 通过疾病名称修改小本本的确诊疾病
	 * @param sickName
	 * @param sickType
	 * @param diaryId
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-10   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	void updateDiarySickIdBySickName(String sickName,String sickType,Long diaryId);
	
	/**   
	 *******************************************************************************
	 * @function : 根据diaryId删除症状与小本本关系
	 * @param diaryId
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-10   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	void deleteDiarySymptom(Long diaryId);
	
	/**   
	 *******************************************************************************
	 * @function : 根据小本本ID获取症状
	 * @param diaryId
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-11   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	List<SickInfo> findSymptomByDiaryId(Long diaryId);
	
	/**   
	 *******************************************************************************
	 * @function : 根据ID获取疾病信息
	 * @param sickId
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-11   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	SickInfo getSickInfoById(Long sickId);
	
	/**   
	 *******************************************************************************
	 * @function : 查询相同症状的用户
	 * @param diaryId
	 * @param userId
	 * @return
	 *******************************************************************************
	 * @creator ：majun   
	 * @date ：2013-4-11   
	 *******************************************************************************
	 * @revisor ：   
	 * @date ：   
	 * @memo ：   
	 *******************************************************************************
	 */
	List<UserInfo> findSameSickUser(Long diaryId,Long userId,Long rownum);
	
}
